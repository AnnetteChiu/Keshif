========= Adding Keshif ==================

1) Insert kshf.init(params) function in a page load callback (**) using an object with parameters defined **here**.

2) You need to include javascript files for jquery, d3, keshif and magnific-popup.

	You can insert the following scripts to your page, if you want to use current keshif distribution structure. Your file locations and names may vary.
	<script type="text/javascript" src="./jquery/jquery-1.9.1.min.js"></script>
	<script type="text/javascript" src="./d3.v3/d3.v3.js" charset="utf-8"></script>
	<script type="text/javascript" src="./keshif.js" charset="utf-8"></script>
	<script type="text/javascript" src="./magnific-popup/jquery.magnific-popup.js"></script>

Also, insert the following style sheets for keshif and magnific-popup to your page head section:
	<link rel="stylesheet" type="text/css" href="./keshif.css"/>
	<link rel="stylesheet" href="magnific-popup/magnific-popup.css"> 

========== Basic Config Parameters ====================

domID: string
	HTML Dom element ID which will hold all the interface components (starting with # character).

itemName: string
	The name of the primary item of your dataset. Item name is shown on top of list display, as in "X *itemName* (selected)"

categoryTextWidth: integer
	The text width in left facet panel (pixels). This width includes the text for category label and item count. Make it wide enough so that all your labels are visible. You can define abbrevations to make them shorter. ((Link))

source: object
	Data source description (text files or google spreadsheet), specified as an object with properties. More info...

charts: array
	Facet descriptions, specified as an array. Facets are inserted in the order specified top to bottom. More info...

list: object
	List display description. More info...

chartTitle: string (Optional) 
	If provided, chart title is shown as the top row.

loadedCb: function (Optional)
	The function called after all the data sources are loaded and before charts & list are created.
	You can do any updates/bookkeeping on the data you'd like to do here.

========== Source Config Parameters =================

Source description object is composed of main source parameters (gdoc or text file), and an array of data sheet descriptions.

Google Spreadsheet Parameters:

	gdocId:	string
		The id of your google document.

	<Access control> Set share setting of your document to whoever you want to allow access (read) to your data on the webpage.
	You can make your spreadsheet public, or you can only share it with a specific group of people.
	Access using Keshif also runs on 

Text File Parameters:

	Each data sheet is expected to be in separate files. The file names are generated using sheet name and the following parameters.

	dirPath: string
		The directory which stores the files.
	fileType: string
		Only 'csv' is supported for now. The first row (line) must only include column names / headers.

	Full file path is dirPath+sheetName+"."+fileType

Data Sheet Parameters:

	First sheet listed always holds primary data (shown/filtered on the list). Following parameters are supported:

	name: string
		Sheet name. If using google spreadhseet, it is the sheet name shown on bottom. If using text files, it is the file name without extension.

	id: string (Optional) 
		By default, the column that holds the unique id for each row in the data tables is assumed to be named 'id'. If it is names something else (ie. studentid), and you don't want to/cannot update spreadsheet, insert the column header name here.

	tableName: string (Optional)
		By default, the tableName is the same as name parameter for sheet.
		If you need to use the same data table for multiple charts (for example, have two filters based on teams (baseball dataset)), you need to download the same dataset twice using different tableName's.
		You should then link catTableName with this custom tableNames.

	query: string (Optional, Google Spreadheet only)
		The query string as accepted by google. More info... (https://developers.google.com/chart/interactive/docs/querylanguage)
		Example: "select A,B,D"

	range: string (Optional, Google Spreadheet only)
		Note: The range (including header row) that you want to retrieve from the data sheet.
		Example: "A1:S100"


========== Facet Parameters =================

The properties that can be defined in each facet are:

facetTitle: string
	The title of the facet

itemMapCtgry: function
	A function that gets a primary item and returns how the data is mapped to categories in facet. It can return null, a single value, or an array of values for multiple mappings.

filter: object
	The text used for displaying filter state. Ex: { rowConj: 'on', rowGroupName: 'road types' }

timeTitle: string
	The title text used for timeline. Only the first facet defined in the array can include a time extension.

itemMapTime: function
	A function that gets a primary item and returns time object(s) relating to that item.

catTableName: string (Optional)
	By default, the list of categories is generated from the values returned by itemMapCtgry function.
	In some cases, the category data may be available in a spreadsheet already loaded, and include additional information per category.
	If so, you can provide catTableName, which matches the tableName in data source description.
	Parameters that take a category description will take all the row data in this specified table.

catLabelText: function (Optional)
	By default, category labels are automatically extrackted from cells.
	If you have a separate sheet that describes labels (see catTableName) and/or you want to use abbrevations, 
	  you can define a function which returns the label of a given category data.

catTooltipText: function (Optional)
	By default, the tooltip text (shown on mouse over) is the same as label text.
	However, in some cases, you may choose to use abbrevations for labels and display full text as a tooltip.
	You can set this property to a function similar to catLabelText, but returns a different string for label.

catDispCountFix: integer (Optional)
	By default, the number of visible categories is dynamically adjusted by the layout algorithm.
	If you need a specific & static number of visible categories in a facet, you can specify it using this parameter.

singleSelect: boolean (Optional)
	If you want the categories to be single-select only (like a radio box), set this parameter to true.

forceSearch: boolean (Optional)
	By default, text search on category labels is enabled ahwn there are 20 or more categories.
	If this property is set false, text search will not be shown in such a case.
	If this property is set true, text search will be shown regardless of category count.

collapsed: boolean (Optional)
	If set to true, the facet will be shown as collapsed (title only).

sortingFuncs: object (Optional)
	This is an array of sorting descriptions. Each option can have the following properties:

	name: string (Optional)
		If you have multiple sorting options, name will be displayed in combob-box selection.

	func: function
		The function that takes two category data, and returns a sorting order, as can be used by JavaScript array sort function (-1,0,1).

	no_resort: boolean (Optional)
		By default, the categories are resorted after each update.
		In some cases, you may want a static ordering of categories.
		If so, set this parameter to true.

================= List Parameters =================


contentFunc: function
	A function that takes a primary item data, and returns an html describing how an item should appear on the display.

sortOpts: array
	An array or sorting options. TODO: complete

textSearch: function (Optional)
	A function that returns a text given a primary item, which is used by the text search option.
	You can return any specific row or combinations to enable searching in multiple fields.

textSearchTitle: string (Optional)
	By default, set to "title".
	Text search displays "Search *textSearchTitle*" as text to guide the user.
	By updating this, you can guide the user to which fields the search is performed.

================= Notes =================

Functions that take data paraameters.

Let's take a look at an example function:
itemMapFunc : function(spill){ return spill.data[spillsCol.Size]; },

Parameter spill holds a primary item, and related data is stored in data property as an array.
spillsCol is a custom variable set by the user for easy access to kshf.dt_ColNames.Spills;
kshf.dt_ColNames.*** maps column names to column index (as can be used in a data property).
In the case above 'Size' is the name of the column we want to access, and spill.data[spillsCol.Size] returns the relevant data.


** Optional: If you want to load data from google spreadsheet, insert this script to your page
	<script type="text/javascript" src="http://www.google.com/jsapi"></script>

** If you need better date object support for your data/display, you can include moment library (not required by keshif by default)
	<script type="text/javascript" src="moment.min.js" charset="utf-8"></script>

** You can use various page callback methods depending on the frameworks you use.
	lean: define body onLoad event.
	jquery: $(document).ready(loadChart);
	Google: google.setOnLoadCallback(loadChart);


* You can only add 1 keshif per page for now. Future updates may support multiple instances.


Example:

kshf.init({
    facetTitle: "5 Years of Infosthetics",
    domID : "#chart_div4",
    itemName : "posts",
    categoryTextWidth:186,
    source : {
        gdocId : '0Ai6LdDWgaqgNdFhuMXh0V1E2Wk5tU19JaDltUWVMVnc',
        sheets : [ {name:"Posts"}]
    },
    loadedCb: function(){
        postCols = kshf.dt_ColNames.Posts;
        kshf.cellToArray(kshf.dt.Posts, [postCols.categories], ",", false);
    },
    charts: [
        {
            facetTitle: "Categories",
            itemMapCtgry : function(post){ return post.data[postCols.categories]; },
            filter: { rowConj: 'in category' }
        },{
            facetTitle: "Author",
            itemMapCtgryf : function(post){ return post.data[postCols.author]; },
            catDispCountFix: 6,
            filter: { rowConj: 'in category' }
        }
    ],
    sortOpts:{
        columns : [
            {   name: 'Date',
                width: 45,
                value: function(d){ return d.data[postCols.date].getUTCFullYear(); },
                value_type : 'number'
            }
        ],
        textSearch : function (d) { return d.data[postCols.title]; },
        textSearchTitle : "post title",
        contentFunc : function(d) { 
        	// return an html string which you can generate from the data parameter, d
        }
    }
});
