========= Using Keshif ==================

1) Insert kshf.init() function in a page load callback (see here **) using an object with parameters defined **here**.

2) Insert the following scripts to your page:
	<script type="text/javascript" src="./jquery/jquery-1.9.1.min.js"></script>
	<script type="text/javascript" src="./d3.v3/d3.v3.js" charset="utf-8"></script>
	<script type="text/javascript" src="./keshif.js" charset="utf-8"></script>
	<script type="text/javascript" src="magnific-popup/jquery.magnific-popup.js"></script> 

	Your file locations and names may vary. Basically, you need to include jquery, d3, keshif and maginificant-popup.

3) Insert the following style sheets to your page head section:
	<link rel="stylesheet" type="text/css" href="./keshif.css"/>
	<link rel="stylesheet" href="magnific-popup/magnific-popup.css"> 

========== Basic Config Parameters ====================

chartTitle: (Optional) If provided, chart title is shown on the top row.

domID: HTML Dom element ID which will hold all the interface components, starting with # character.

itemName: The name of the primary item of your dataset. Item name is shown on top of list display, as in "X *itemName* (selected)"

categoryTextWidth: The text width in left facet panel (pixels). This width includes the text for category label and item count. Make it wide enough so that all your labels are visible. Use abbrevations to make them shorter. ((Link))

source: Your data source description (text files or google spreadsheet), specified as an object with properties. More info...

charts: Your list of charts/filters, specified as an array of objects. Charts are inserted in the order specified, top to bottom. More info...

list: List display description. More info...

loadedCb: (Optional)
	The function called when all the data sources are loaded and before charts & list are created.
	You can do any updates/bookkeeping on the data you'd like to do here.

========== Source Config Parameters =================

Source description object is composed of main source setting (gdoc or text file), and an array of data sheet descriptions.

Google Spreadsheet Parameters:

	gdocId:	The id of your google document.

	Access control* Set share setting of your document to whoever you want to allow access (read) to your data on the webpage.
	You can make your spreadsheet public, or you can only share it with a specific group of people, through google login.

Text File Parameters:

	Each data sheet is expected to be in separate files. The file names are generated using sheet name and the following parameters

	filePath: The directory which stores the files.
	fileType: Only 'csv' is supported for now. The first row (line) must only include column names / headers.

	Full file path is filePath+sheetName+"."+fileType

Data Sheet Parameters:

	First sheet listed always holds primary data (shown/filtered on the list). Following parameters are supported:

	name: Sheet name. If using google spreadhseet, it is the sheet name shown on bottom. If using text files, it is the file name without extension.

	id: (Optional) By default, the column that holds the unique id for each row in the data tables is assumed to be named 'id'. If it is names something else (ie. studentid), and you don't want to/cannot update spreadsheet, insert the column header name here.

	query: (Optional, Google Spreadheet only)
		The query string as accepted by google. More info... (https://developers.google.com/chart/interactive/docs/querylanguage)
		Example: "select A,B,D"

	range: (Optional, Google Spreadheet only)
		Note: The range (including header row) that you want to retrieve from the data sheet.
		Example: "A1:S100"


========== Facet Parameters =================

The properties that can be defined in each facet are:

facetTitle:
	The title text shon in this facet

itemMapCtgry:
	A function that gets a primary item and returns how the data is mapped to categories in facet.

filter: 
	The text used for displaying filter state.
	rowConj: Ex: 'in category' 

timeTitle: 
	The title text used for timeline. Only the first facet defined in the array can include a time extension.

itemMapTime: 
	A function that gets a primary item and returns some time property related to that item.

tableName: (Optional)
	By default, the list of categories is generated from the values returned by itemMapCtgry function.
	In some cases, the data may be available in a spreadsheet already loaded.
	If so, you can provide the tableName instead.
	Parameters that take a category description will take all the row data in this specified table.

catLabelText: (Optional)
	By default, category labels are automatically extrackted from cells.
	If you have a separate sheet that describes labels (see tableName) and/or you want to use abbrevations, 
	  you can define a function which returns the label of a given category data.

catTooltipText: (Optional)
	By default, the tooltip text (shown on mouse over) is the same as label text.
	However, in some cases, you may choose to use abbrevations for labels and display full text as a tooltip.
	You can set this property to a function similar to catLabelText, but returns a different string for label.

show_cat_fixed: (Optional)
	By default, the number of categories shown/visible is dynamically adjusted by the layout algorithm.
	If you need a specific / static height for categories in a facet, you can specify it using this parameter.

singleSelect: (Optional)
	If you want the categories to be single-select only (like a radio box), set this parameter to true.

forceSearch: (Optional)
	By default, text search on category labels is enabled ahwn there are 20 or more categories.
	If this property is set false, text search will not be shown in such a case.
	If this property is set true, text search will be shown regardless of category count.

collapsed: (Optional)
	If set to true, the facet will be shown as collapsed (title only).

sortingFuncs: (Optional)
	This is an array of sorting descriptions. Each option can have the following properties:

	name: 

	funcf: 

	no_resort: 

================= List Parameters =================




================= Notes =================

** Optional: If you want to load data from google spreadsheet, insert this script to your page
	<script type="text/javascript" src="http://www.google.com/jsapi"></script>

** If you need better date object support for your data/display, you can include moment library (not required by keshif)
	<script type="text/javascript" src="moment.min.js" charset="utf-8"></script>

** You can use various page callback methods depending on the frameworks you use.
	Lean: $(document).ready(loadChart);
	Google: google.setOnLoadCallback(loadChart);


Notes

* You can only add 1 keshif per page for now. Future updates may support multiple instances.


Example:

kshf.init({
        facetTitle: "5 Years of Infosthetics",
        domID : "#chart_div4",
        itemName : "posts",
        categoryTextWidth:186,
        source : {
            gdocId : '0Ai6LdDWgaqgNdFhuMXh0V1E2Wk5tU19JaDltUWVMVnc',
            sheets : [ {name:"Posts"}]
        },
        loadedCb: function(){
            postCols = kshf.dt_ColNames.Posts;
            kshf.cellToArray(kshf.dt.Posts, [postCols.categories], ",", false);
        },
        charts: [
            {
                facetTitle: "Categories",
                itemMapCtgry : function(post){ return post.data[postCols.categories]; },
                filter: { rowConj: 'in category' }
            },{
                facetTitle: "# of comments",
                itemMapCtgry : function(post){ return getNumComments(post.data[postCols.comments]); },
                filter: { rowConj: 'in category' }
            },{
                facetTitle: "Year",
                itemMapCtgry : function(post){ return post.data[postCols.date].getUTCFullYear(); },
                filter: { rowConj: 'in category' }
            },{
                facetTitle: "Author",
                itemMapCtgryf : function(post){ return post.data[postCols.author]; },
                show_cat_fixed: 6,
                filter: { rowConj: 'in category' }
            }
        ],
        list:{
            columns : [
                {   name: 'Date',
                    width: 45,
                    value: function(d){ return d.data[postCols.date].getUTCFullYear(); },
                    value_type : 'number'
                }
            ],
            textSearch : function (d) { return d.data[postCols.title]; },
            textSearchTitle : "post title",
            contentFunc : function(d) { 
            	// return an html string which you can generate from the data parameter, d
            }
        }
    });
